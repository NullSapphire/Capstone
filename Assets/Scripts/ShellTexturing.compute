// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

int ShellCount;
int vertexCount;
int triangleCount;
float height;

RWStructuredBuffer<float3> VertexBuffer;
RWStructuredBuffer<int> TriangleBuffer;
RWStructuredBuffer<float2> UVBuffer;
RWStructuredBuffer<float3> NormalBuffer;
RWStructuredBuffer<float4> ColorBuffer;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int triangleID = id.x;

    float ShellDisplacement = height / ShellCount;

    if (triangleID >= triangleCount)
        return;
    
    int v1 = TriangleBuffer[triangleID * 3 + 0];
    int v2 = TriangleBuffer[triangleID * 3 + 1];
    int v3 = TriangleBuffer[triangleID * 3 + 2];

    float3 pos1 = VertexBuffer[v1];
    float3 pos2 = VertexBuffer[v2];
    float3 pos3 = VertexBuffer[v3];

    float3 normal1 = NormalBuffer[v1];
    float3 normal2 = NormalBuffer[v2];
    float3 normal3 = NormalBuffer[v3];

    float2 uv1 = UVBuffer[v1];
    float2 uv2 = UVBuffer[v2];
    float2 uv3 = UVBuffer[v3];

    for (int i = 0; i < ShellCount; i++)
    {
        float4 color = i * 1.0f / (ShellCount - 1); 

        int index1 = i * vertexCount + v1;
        int index2 = i * vertexCount + v2;
        int index3 = i * vertexCount + v3;

        float3 newPos1 = pos1 + normal1 * ShellDisplacement * i;
        float3 newPos2 = pos2 + normal2 * ShellDisplacement * i;
        float3 newPos3 = pos3 + normal3 * ShellDisplacement * i;

        VertexBuffer[index1] = newPos1;
        VertexBuffer[index2] = newPos2;
        VertexBuffer[index3] = newPos3;

        NormalBuffer[index1] = normal1;
        NormalBuffer[index2] = normal2;
        NormalBuffer[index3] = normal3;

        UVBuffer[index1] = uv1;
        UVBuffer[index2] = uv2;
        UVBuffer[index3] = uv3;
        
        ColorBuffer[index1] = color;
        ColorBuffer[index2] = color;
        ColorBuffer[index3] = color;

        TriangleBuffer[i * triangleCount * 3 + triangleID * 3 + 0] = index1;
        TriangleBuffer[i * triangleCount * 3 + triangleID * 3 + 1] = index2;
        TriangleBuffer[i * triangleCount * 3 + triangleID * 3 + 2] = index3;
    }
    
}
